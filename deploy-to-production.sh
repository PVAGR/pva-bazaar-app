#!/bin/bash
# PVA Bazaar Production Deployment Script

echo "üöÄ PVA Bazaar Deployment Script"
echo "==============================="
echo ""
echo "This script will deploy your PVA Bazaar app to production using Vercel."
echo "It will deploy both the backend API and frontend to Vercel."
echo ""

# Check for Vercel CLI
if ! command -v vercel &> /dev/null; then
    echo "üì¶ Installing Vercel CLI..."
    npm install -g vercel
}
echo ""
    echo "‚ùå Failed to get frontend URL. Please check frontend_deployment_output.txt"
    #!/bin/bash

    # PVA Bazaar Production Deployment Script

    set -euo pipefail

    ROOT_DIR="/workspaces/pva-bazaar-app"
    FRONTEND_DIR="$ROOT_DIR/Frontend"
    BACKEND_DIR="$ROOT_DIR/backend"

    echo "ÔøΩ PVA Bazaar Deployment Script"
    echo "==============================="
    echo ""
    echo "This script deploys the backend API and frontend to Vercel."
    echo "It will attempt to create minimal vercel.json files if missing, build the frontend, and deploy both projects."
    echo ""

    # Basic checks
    if [ ! -d "$ROOT_DIR" ]; then
      echo "‚ùå Root directory not found: $ROOT_DIR"
      exit 1
    fi

    if [ ! -d "$BACKEND_DIR" ] || [ ! -d "$FRONTEND_DIR" ]; then
      echo "‚ùå Expected project structure not present. Make sure you're running this in the correct environment."
      echo "Expected: backend/ and Frontend/ directories inside $ROOT_DIR"
      exit 1
    fi

    if ! command -v vercel &> /dev/null; then
      echo "üì¶ Installing Vercel CLI..."
      npm install -g vercel
      echo "‚úÖ Vercel CLI installed"
    fi

    echo ""
    echo "üîß Step 1 ‚Äî Deploy backend"
    echo "================================"
    cd "$BACKEND_DIR"

    # Ensure backend vercel.json
    if [ ! -f "vercel.json" ]; then
      echo "Creating backend vercel.json..."
      cat > vercel.json << 'EOF'
    {
      "version": 2,
      "builds": [
        { "src": "api/index.js", "use": "@vercel/node" }
      ],
      "routes": [
        { "src": "^/api/(.*)", "dest": "api/index.js" },
        { "src": "^/(.*)", "dest": "api/index.js" }
      ]
    }
    EOF
      echo "‚úÖ backend vercel.json created"
    fi

    echo "Please login to Vercel if prompted..."
    vercel login || true

    echo "Deploying backend to Vercel (this may prompt for interactive login)..."
    vercel --prod --confirm 2>&1 | tee /tmp/vercel_backend_output.txt

    # Extract backend URL
    BACKEND_URL=$(grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app" /tmp/vercel_backend_output.txt | head -n1 || true)
    if [ -z "$BACKEND_URL" ]; then
      # fallback: try any https URL
      BACKEND_URL=$(grep -oE "https://[^[:space:]]+" /tmp/vercel_backend_output.txt | head -n1 || true)
    fi

    if [ -z "$BACKEND_URL" ]; then
      echo "‚ùå Could not determine backend URL from Vercel output. See /tmp/vercel_backend_output.txt"
      exit 1
    fi

    echo "‚úÖ Backend deployed: $BACKEND_URL"

    echo ""
    echo "üîß Step 2 ‚Äî Update frontend configuration"
    echo "================================"
    cd "$FRONTEND_DIR"

    echo "Updating frontend config to use backend: $BACKEND_URL/api"
    cat > config.js <<EOF
    // Production configuration ‚Äî autogenerated by deploy script
    const config = {
      apiUrl: '${BACKEND_URL}/api'
    };

    export default config;
    EOF

    echo "‚úÖ Frontend config updated"

    echo ""
    echo "üì¶ Step 3 ‚Äî Build frontend"
    echo "================================"
    npm ci
    npm run build
    echo "‚úÖ Frontend built (dist/)"

    echo ""
    echo "üîß Step 4 ‚Äî Deploy frontend to Vercel"
    echo "================================"

    if [ ! -f "vercel.json" ]; then
      echo "Creating frontend vercel.json for static deployment..."
      cat > vercel.json <<'EOF'
    {
      "version": 2,
      "builds": [
        { "src": "dist/**", "use": "@vercel/static" }
      ],
      "routes": [
        { "src": "^/(.*)", "dest": "/dist/$1" }
      ]
    }
    EOF
      echo "‚úÖ frontend vercel.json created"
    fi

    vercel --prod --confirm 2>&1 | tee /tmp/vercel_frontend_output.txt

    # Extract frontend URL
    FRONTEND_URL=$(grep -oE "https://[a-zA-Z0-9.-]+\.vercel\.app" /tmp/vercel_frontend_output.txt | head -n1 || true)
    if [ -z "$FRONTEND_URL" ]; then
      FRONTEND_URL=$(grep -oE "https://[^[:space:]]+" /tmp/vercel_frontend_output.txt | head -n1 || true)
    fi

    if [ -z "$FRONTEND_URL" ]; then
      echo "‚ùå Could not determine frontend URL from Vercel output. See /tmp/vercel_frontend_output.txt"
      exit 1
    fi

    echo "‚úÖ Frontend deployed: $FRONTEND_URL"

    echo ""
    echo "üéâ Deployment finished"
    echo "======================="
    echo "Backend: $BACKEND_URL"
    echo "Frontend: $FRONTEND_URL"
    echo ""
    echo "Next steps:"
    echo "- In Vercel dashboard, set production environment variables for the backend (MONGODB_URI, JWT_SECRET, ALLOWED_ORIGIN)."
    echo "- Add custom domain 'pvabazaar.org' to your frontend Vercel project and update DNS as instructed by Vercel."
    echo "- Verify API health: ${BACKEND_URL}/api/health"

    # clean up
    rm -f /tmp/vercel_backend_output.txt /tmp/vercel_frontend_output.txt

    exit 0
