name: PVA Quality Gates
on:
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Core testing matrix
  unit_integration:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-suite: [web-com, web-org, api-tests, contracts]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests
        run: pnpm --filter=${{ matrix.test-suite }} test
        
      - name: Run integration tests
        if: matrix.test-suite == 'api-tests'
        run: pnpm --filter=api-tests test:integration
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: apps/${{ matrix.test-suite }}/coverage

  # End-to-end testing with Playwright
  e2e_playwright:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [chromium, firefox, webkit, mobile]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm dlx playwright install --with-deps
        
      - name: Start development servers
        run: |
          pnpm dev &
          sleep 30  # Wait for servers to start
          
      - name: Run E2E tests
        run: pnpm dlx playwright test --project=${{ matrix.project }}
        
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report-${{ matrix.project }}
          path: playwright-report/

  # Visual regression & brand consistency
  visual_brand_checks:
    name: Visual & Brand Consistency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build applications
        run: pnpm build
        
      - name: Start staging servers
        run: |
          pnpm preview &
          sleep 30
          
      - name: Run BackstopJS visual regression
        run: pnpm qa:backstop:test
        
      - name: Check brand color compliance
        run: pnpm qa:brand:check
        
      - name: Upload visual diff artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: backstop-report
          path: qa/backstop_data/

  # Accessibility testing
  accessibility_audit:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Start development servers
        run: |
          pnpm dev &
          sleep 30
          
      - name: Run axe-core accessibility tests
        run: pnpm qa:axe
        
      - name: Run Pa11y accessibility tests
        run: pnpm qa:pa11y
        
      - name: Upload accessibility reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-reports
          path: qa/reports/

  # Performance testing
  performance_audit:
    name: Performance Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build applications
        run: pnpm build
        
      - name: Start production servers
        run: |
          pnpm preview &
          sleep 30
          
      - name: Run Lighthouse CI
        run: pnpm qa:lighthouse
        
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-reports
          path: .lighthouseci/

  # Load testing for API
  load_testing:
    name: API Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Start API server
        run: |
          pnpm --filter=api dev &
          sleep 30
          
      - name: Run Artillery load tests
        run: pnpm qa:artillery
        
      - name: Upload load test reports
        uses: actions/upload-artifact@v3
        with:
          name: load-test-reports
          path: qa/reports/artillery/

  # Security testing
  security_audit:
    name: Security Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run npm audit
        run: pnpm audit --audit-level moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Setup OWASP ZAP
        run: |
          docker pull owasp/zap2docker-stable
          
      - name: Start application for security testing
        run: |
          pnpm preview &
          sleep 30
          
      - name: Run ZAP baseline scan
        run: |
          docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable \
            zap-baseline.py -t http://host.docker.internal:3000 -J zap-report.json
            
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: zap-report.json

  # Smart contract testing
  blockchain_tests:
    name: Blockchain & Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run Foundry tests
        run: |
          cd apps/contracts
          forge test -vvv --gas-report
          
      - name: Run Slither static analysis
        uses: crytic/slither-action@v0.3.0
        with:
          target: 'apps/contracts/src/'
          
      - name: Generate gas report
        run: |
          cd apps/contracts
          forge test --gas-report > gas-report.txt
          
      - name: Upload contract test reports
        uses: actions/upload-artifact@v3
        with:
          name: contract-reports
          path: |
            apps/contracts/gas-report.txt
            apps/contracts/slither-report.json

  # Quality gate summary
  quality_gate_summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [unit_integration, e2e_playwright, visual_brand_checks, accessibility_audit, performance_audit, security_audit, blockchain_tests]
    if: always()
    steps:
      - name: Check quality gates
        run: |
          echo "Quality Gate Results:"
          echo "Unit/Integration: ${{ needs.unit_integration.result }}"
          echo "E2E Tests: ${{ needs.e2e_playwright.result }}"
          echo "Visual/Brand: ${{ needs.visual_brand_checks.result }}"
          echo "Accessibility: ${{ needs.accessibility_audit.result }}"
          echo "Performance: ${{ needs.performance_audit.result }}"
          echo "Security: ${{ needs.security_audit.result }}"
          echo "Blockchain: ${{ needs.blockchain_tests.result }}"
          
          # Fail if any critical gate failed
          if [ "${{ needs.unit_integration.result }}" != "success" ] || \
             [ "${{ needs.e2e_playwright.result }}" != "success" ] || \
             [ "${{ needs.security_audit.result }}" != "success" ] || \
             [ "${{ needs.blockchain_tests.result }}" != "success" ]; then
            echo "❌ Critical quality gates failed!"
            exit 1
          fi
          
          echo "✅ All critical quality gates passed!"
